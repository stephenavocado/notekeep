<script>

class App {
  constructor() {
    this.notes = [];
    this.title = '';
    this.text = '';
    this.id = '';
    // instance properties that make them available to other parts of app 
    
    this.$placeholder = document.querySelector('#placeholder');
    this.$form = document.querySelector('#form');
    this.$notes = document.querySelector('#notes');
    this.$noteTitle = document.querySelector('#note-title');
    this.$noteText = document.querySelector('#note-text');
    this.$formButtons = document.querySelector('#form-buttons');
    this.$formCloseButton = document.querySelector('#form-close-button');
    this.$modal = document.querySelector('.modal');
    this.$modalTitle = document.querySelector('.modal-title');
    this.$modalText = document.querySelector('.modal-text');
    this.$modalCloseButton = document.querySelector('.modal-close-button');
    this.$colorTooltip = document.querySelector('#color-tooltip');
    // using $ to show that we are working with an html element as opposed to data

    this.addEventListeners();
  }

  addEventListeners() {
    document.body.addEventListener('click', event => {
      this.handleFormClick(event);
      this.selectNote(event);
      this.openModal(event);
    }); 
    
    document.body.addEventListener('mouseover', event => {
      this.openTooltip(event);      
    });

    document.body.addEventListener('mouseout', event => {
      this.closeTooltip(event);      
    });

    this.$colorTooltip.addEventListener('mouseover', function() {
      this.style.display = 'flex';
    });

    this.$colorTooltip.addEventListener('mouseout', function() {
      this.style.display = 'none';
    });
    // use function to get the right 'this' for the tooltip

    this.$form.addEventListener('submit', event => {
      event.preventDefault();
      const title = this.$noteTitle.value;
      const text = this.$noteText.value;
      const hasNote = title || text;
      if (hasNote) {
        // add note
        this.addNote({ title, text });
      }
    });

    this.$formCloseButton.addEventListener('click', event => {
      event.stopPropagation();
      // will stop event from propagating up to document body handler
      this.closeForm();
    });

    this.$modalCloseButton.addEventListener('click', event => {
      this.closeModal(event);
    });
  }

  handleFormClick(event) {
    const isFormClicked = this.$form.contains(event.target);

    const title = this.$noteTitle.value;
    const text = this.$noteText.value;
    const hasNote = title || text;

    if (isFormClicked) {
      // open form
      this.openForm();
    } else if (hasNote) {
      this.addNote({ title, text });
    } else {
      // close form
      this.closeForm();

    }
  }

  openForm() {
    this.$form.classList.add('form-open');
    this.$noteTitle.style.display = 'block';
    this.$formButtons.style.display = 'block';
  }

  closeForm() {
    this.$form.classList.remove('form-open');
    this.$noteTitle.style.display = 'none';
    this.$formButtons.style.display = 'none';
    this.$noteTitle.value = '';
    this.$noteText.value = '';
    // clears form after submitting
  }

  openModal(event) {
    if (event.target.closest('.note')) {
      this.$modal.classList.toggle('open-modal');
      this.$modalTitle.value = this.title;
      this.$modalText.value = this.text;
    }
  }
  // find whether targeted element was closest to .note

  closeModal(event) {
    this.editNote();
    this.$modal.classList.toggle('open-modal');
  }

  openTooltip(event) {
    if (!event.target.matches('.toolbar-color')) return;
    this.id = event.target.nextElementSibling.dataset.id;
    // gets note div which allows us to access dataset id
    const noteCoords = event.target.getBoundingClientRect();
    // coordinates of where user is hovering to make sure tooltip shows up in right place
    const horizontal = noteCoords.left;
    const vertical = window.scrollY - 20;
    this.$colorTooltip.style.transform = `translate(${horizontal}px, ${vertical}px)`;
    this.$colorTooltip.style.display = 'flex';
  }

   closeTooltip(event) {
    if (!event.target.matches('.toolbar-color')) return;
    this.$colorTooltip.style.display = 'none';
  }

  // destructure note object that allows us to use object shorthand (title & text) 
  addNote({ title, text }) {
    const newNote = {
      title,
      text,
      color: 'white',
      id: this.notes.length > 0 ? this.notes[this.notes.length -1].id + 1 : 1
    };
    this.notes = [...this.notes, newNote];
    this.displayNotes(); 
    this.closeForm();
    // close form after adding note
  }

  editNote() {
    const title = this.$modalTitle.value;
    const text = this.$modalText.value;
    // user map to transform array and keep at same length 
    this.notes = this.notes.map(note => 
      note.id === Number(this.id) ? { ...note, title, text } : note
    );
    this.displayNotes();
    // convert this.id to an integer
  }

  selectNote(event) {
    const $selectedNote = event.target.closest('.note');
    // returns closest element to the note class clicked
    if (!$selectedNote) return;
    // stops function when no note is selected
    const [$noteTitle, $noteText] = $selectedNote.children;
    // destructures array of elements within the note div 
    this.title = $noteTitle.innerText;
    this.text = $noteText.innerText;
    this.id = $selectedNote.dataset.id;
  }
  // gets data from note user selected

  displayNotes() {
    const hasNotes = this.notes.length > 0;
    this.$placeholder.style.display = hasNotes ? 'none' : 'flex';

    this.$notes.innerHTML = this.notes.map(note => `
      <div style="background: ${note.color};" class="note" data-id="${note.id}">
        <div class="${note.title && 'note-title'}">${note.title}</div>
        <div class="note-text">${note.text}</div>
        <div class="toolbar-container">
          <div class="toolbar">
            <img class="toolbar-color" src="https://icon.now.sh/palette">
            <img class="toolbar-delete" src="https://icon.now.sh/delete">
          </div>
        </div>
      </div>
    `).join("");
    // if we have a title, use class 'note-title'
    // .join("") is being used to remove the comma between notes by "joining the notes into a single string"
  }
}

new App();

</script>